Project Overview

NmapGPT is a pentesting tool that:

    Runs Nmap scans to generate XML results.
    Parses XMLs to extract hosts, ports, services, and OS details.
    Uses AI models to analyze results, suggesting vulnerabilities, exploits, and mitigations.
    Provides a Streamlit web interface for user interaction.
    Supports local and cloud deployments.

Script Explanations
1. ai_engine.py

    
    Purpose: Core AI processing engine for analyzing Nmap scan results using multiple model providers.
    
    Functionality:
        Initialization: Loads AI model based on provider (huggingface, openai, deepseek, grok) and name (default: deepseek/deepseek-coder-6.7b-instruct).
        Hugging Face Support: Uses transformers to load models like deepseek/deepseek-coder-6.7b-instruct. Skips HF_TOKEN for public models to avoid 401 Unauthorized errors; uses token for gated models (e.g., meta-llama/Llama-3-8b-instruct).
        API Providers: Sends requests to OpenAI, DeepSeek, or xAI APIs with API keys from .env. Fixed DeepSeek 400 Bad Request with stream: False and addressed xAI 403 Forbidden with key validation.
        Prompt Processing: Formats Nmap data into prompts using templates (e.g., exploit_suggestion.txt) and generates analysis (CVEs, exploits, mitigations).
        Error Handling: Logs errors (e.g., model loading failures) with logging.DEBUG.
        
    How It Works:
        Loads .env for API keys (OPENAI_API_KEY, DEEPSEEK_API_KEY, XAI_API_KEY, HF_TOKEN).
        Initializes model or API client based on provider.
        Parses Nmap data into a string, applies prompt template, and generates analysis.
    Contribution: Enables AI-driven insights, making NmapGPT a powerful pentesting tool.

2. nmap_ai_wrapper.py

    
    Purpose: CLI interface for running Nmap scans, parsing XMLs, and triggering AI analysis.
    
    Functionality:
        Nmap Scanning: Added --scan, --target, and --options arguments to run Nmap scans (e.g., nmap -sV -O 192.168.1.1 -oX output.xml).
        XML Storage: Saves scan results to outputs/scans/ with unique names (e.g., scan_192.168.1.1.xml).
        Parsing: Uses NmapParser to extract scan data.
        AI Integration: Calls AIEngine to analyze parsed data and saves results to outputs/analysis_report.txt.
        CLI Arguments:
        ```
            --scan: Run Nmap scan.
            --target: IP or range (e.g., 192.168.1.1).
            --options: Nmap flags (default: -sV -O).
            --input: XML file for analysis.
            --model-provider/--model-name: AI settings.
            ```
        Security: Uses subprocess.run for safe command execution.
        
    How It Works:
    
        Parses CLI arguments with argparse.
        Runs Nmap scan if --scan is set, saving XML.
        Parses XML and passes data to AIEngine for analysis.
        Outputs results to specified file.
    Contribution: Provides a command-line workflow for pentesters, integrating scanning and analysis.

3. streamlit_app.py

    
    Purpose: Web interface for Nmap scanning, XML uploading, and AI analysis with a classic, user-friendly design.
    
    Functionality:
    
        GUI Layout: Uses sidebar for settings (model provider, name, output file) and main panel for actions (scan, upload, analyze).
        Nmap Scanning: Runs scans via subprocess.run with list-based commands to prevent injection. Saves XMLs to outputs/scans/ with timestamps.
        XML Upload: Allows uploading Nmap XMLs, saved to outputs/scans/.
        AI Analysis: Calls AIEngine to analyze parsed XMLs, displaying results in expanders.
        
        Enhancements:
            Classic Style: Custom CSS for neutral colors, rounded buttons, and clean layout.
            Scan History: Shows last 5 scans in sidebar with clickable buttons to reload XMLs.
            Previews: Expanders for scan/upload results.
            Validation: Regex checks for target and options.
            Progress: Spinners for scans and analysis.
        Error Fixes:
        
            Resolved ModuleNotFoundError with sys.path.append and ensured app/parser.py exists.
            Fixed StreamlitSetPageConfigMustBeFirstCommandError by moving st.set_page_config() before other Streamlit commands.
        Security: Safe command execution and input validation.
    
    How It Works:
        Sets up Streamlit page with wide layout.
        Handles user inputs via forms and buttons.
        Executes Nmap scans, uploads XMLs, or runs AI analysis based on user action.
        Displays results and logs errors.
   
    Contribution: Provides an intuitive web interface, making NmapGPT accessible to users.

4. parser.py

    
    Purpose: Parses Nmap XML files to extract structured data for AI analysis.
    
    Functionality:
        XML Parsing: Uses xml.etree.ElementTree to extract hosts, ports, services, and OS details.
        Data Structure: Returns a dictionary with:
            Host IP as key.
            Ports (protocol, state, service, version).
            OS (name, accuracy).
        Error Handling: Logs parsing errors (e.g., invalid XML).
  
    How It Works:
        Reads XML file.
        Iterates through <host> elements, extracting <address>, <port>, <service>, and <osmatch>.
        Builds structured data for AIEngine.
    Contribution: Enables accurate data extraction, critical for AI analysis.

5. README.md

    
    Purpose: Professional documentation for NmapGPT, detailing features, changes, and usage.
   
    Functionality:
        Overview: Describes NmapGPTâ€™s purpose and capabilities.
        Changes: Lists all recent updates (AI engine, Nmap module, GUI, error fixes).
        Installation: Provides setup steps for local and cloud environments.
        Usage: Explains CLI and Streamlit workflows.
        Security: Notes on ethical scanning and .env protection.
        Future: Suggests enhancements (e.g., CVE lookup, fine-tuning with darkknight25/redteam_manualcommands).
    
    How It Works:
        Markdown file for GitHub or project root.
        Guides users and contributors.
    Contribution: Enhances project accessibility and professionalism.

How Scripts Work Together

    User Interaction:
        CLI (nmap_ai_wrapper.py): Users run scans and analyze XMLs via commands (e.g., python app/nmap_ai_wrapper.py --scan --target 192.168.1.1).
        Web UI (streamlit_app.py): Users interact via browser, running scans, uploading XMLs, or analyzing results.
    Scanning:
        nmap_ai_wrapper.py or streamlit_app.py executes Nmap scans, saving XMLs to outputs/scans/.
    Parsing:
        parser.py extracts data from XMLs, passing it to ai_engine.py.
    Analysis:
        ai_engine.py processes data with AI models, generating reports saved to outputs/analysis_report.txt.
    Documentation:
        README.md guides setup and usage.

Setup Recap
Local (C:\Users\name\Downloads\NmapGPT_Project\NmapGPT)

    Save Scripts:
        Update ai_engine.py, nmap_ai_wrapper.py, streamlit_app.py, parser.py, README.md in respective directories.
    Install Dependencies:
    
```
    pip install -r requirements.txt
    ```
    Install Nmap:
    ```
        Add to PATH: setx PATH "%PATH%;C:\Program Files (x86)\Nmap".
        ```
    Run:
    ```
        CLI: python app/nmap_ai_wrapper.py --scan --target 192.168.1.1 --options "-sV -O".
        Web: streamlit run web_ui\streamlit_app.py.
```
SageMaker

    Upload:
    
``
tar -czf NmapGPT.tar.gz NmapGPT
```
    Extract: tar -xzf NmapGPT.tar.gz.

Setup:
```
sudo apt-get install -y nmap
pip install -r NmapGPT/requirements.txt accelerate huggingface_hub
```
Run:
```

    streamlit run web_ui/streamlit_app.py --server.port 8501
```
Notes

    Security: Scan only authorized targets. Secure .env.
    Errors Fixed: 401 Unauthorized, 403 Forbidden, ModuleNotFoundError, StreamlitSetPageConfigMustBeFirstCommandError.
